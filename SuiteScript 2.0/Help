---------------------------------------------------------------------------------------------------------------------------------------
							Get Current user details
---------------------------------------------------------------------------------------------------------------------------------------
// Get User Information as this saved search must be running in a user context
      var objUser = runtime.getCurrentUser();
      var userId = objUser.id;
      var userName = objUser.name;              
      var userEmail = objUser.email;  
      var userRole = runtime.getCurrentUser().role;     // Alternate construct
      var userRoleId = runtime.getCurrentUser().roleId;
---------------------------------------------------------------------------------------------------------------------------------------      
							Encoding/Decoding (server side)
----------------------------------------------------------------------------------------------------------------------------------------							
encode.convert - used to transform a string from one form to other (encoding/decoding both)
-------------------------------------------------------------------------------------------

require(['N/encode'],
 function(encode) {
 function convertStringToDifferentEncoding() {
 var stringInput = "1234567890";
 log.debug(stringInput);

 var base64EncodedString = encode.convert({
 string: stringInput,
 inputEncoding: encode.Encoding.UTF_8,
 outputEncoding: encode.Encoding.BASE_64
 });
log.debug(base64EncodedString);

var hexEncodedString = encode.convert({
 string: base64EncodedString,
 inputEncoding: encode.Encoding.UTF_8,
 outputEncoding: encode.Encoding.HEX
 });
log.debug(hexEncodedString);

 var base64= encode.convert({
 string: hexEncodedString ,
 inputEncoding: encode.Encoding.HEX,
 outputEncoding: encode.Encoding.UTF_8
 });
log.debug(base64);

var utf8 = encode.convert({
 string: base64,
 inputEncoding: encode.Encoding.BASE_64,
 outputEncoding: encode.Encoding.UTF_8
 });
log.debug(utf8);

 }
 convertStringToDifferentEncoding();
 });
---------------------------------------------------------------------------------------------------------------------------------------
							Yes/no alert/confirm
---------------------------------------------------------------------------------------------------------------------------------------
if(!confirm('Token will be updated')){
    return false;
}
---------------------------------------------------------------------------------------------------------------------------------------
							SuiteCloud IDE URL
----------------------------------------------------------------------------------------------------------------------------------------
http://system.netsuite.com/download/ide/update_18_1
----------------------------------------------------------------------------------------------------------------------------------------
							Using JQuery in NS
---------------------------------------------------------------------------------------------------------------------------------------
//Jquery is available out of the box, using 'jQuery' module object
------------------------------------------------------------------
    		
    		jQuery('#title').hide();
    		jQuery('#tdbody_addmediaitem').hide();
    		jQuery('#completeddate').click( function(event) {
    			jQuery(this).hide();
    			jQuery("#completeddate_fs_lbl_uir_label").hide();
    			alert("before");
    		    event.preventDefault();
    		    alert("after");
    		  });
--------------------------------------------------------------------------------------------------------------------------------------
							Script Parameters
--------------------------------------------------------------------------------------------------------------------------------------
A parameter is created in Scheduled Script. Assign some value to it.
-------------------------------------------------------------------
function afterSubmit(context) {
    	var customer = context.newRecord;
    	
    	//task to execute scheduled script
    	var schedTask = task.create({
    		taskType : task.TaskType.SCHEDULED_SCRIPT
    	});
    	
    	schedTask.scriptId = 'customscript_sdr_ss_generate_so_report';
    	schedTask.deploymentId = 'customdeploy_sdr_ss_generate_so_report';
    	
	// Script Param
    	schedTask.params = {
    		custscript_sdr_customer_id : customer.id
    	};
    	
    	schedTask.submit();
    }


Scheduled Script:
-----------------
function execute(scriptContext) {
    	//use the existing JS lib
    	var scriptRef = runtime.getCurrentScript();
    	var customerId = scriptRef.getParameter({
    		name : 'custscript_sdr_customer_id'
    	});
    	
    	log.audit('CustomerId', customerId);
    	
    	var filters = [['type', 'anyof', 'SalesOrd'],
    				  'and',
    				  ['mainline', 'is', true]];
    	
    	if(customerId){
    		filters = _.concat(filters, ['and', ['entity', 'anyof', customerId]]);
    	}
    	
    	
    	var orderSearch = search.create({
    		type : 'transaction',
    		filters : filters,
    		columns : ['entity', 'trandate', 'tranid', 'salesrep', 'total']
    	});
    	
    	sdrLib.sendReport(orderSearch);
    }
    
    
--------------------------------------------------------------------------------------------------------------------------------------
							Using Third party API (AMD)
--------------------------------------------------------------------------------------------------------------------------------------
define(['N/runtime', 
        'N/search', 
	'/SuiteScripts - Globals/lib/sdr_lib',		// Custom lib reference
        '/SuiteScripts - Globals/lib/lodash'		//Third party API reference (AMD Based)
        ],
	
function(runtime, search, sdrLib, _) {				// '_' is the lodash module object & sdrLib is custom lib reference
--------------------------------------------------------------------------------------------------------------------------------------
  							Using Third party API (Non AMD)
---------------------------------------------------------------------------------------------------------------------------------------
Create a JSON Config file having all third party APIs :
-------------------------------------------------------
{
  "paths":{
                "moment" : "/SuiteScripts - Globals/lib/moment.min"
      }
}


In SuitesScript :
-----------------
/**
 * @NApiVersion 2.x
 * @NScriptType ClientScript
 * @NModuleScope SameAccount
 * @NAmdConfig /SuiteScripts - Globals/myConfig.json		// Add path to JSON Config
 */

define(['N/ui/dialog', 'N/ui/message', 'moment'],		// 'moment' is the third party APIs
---------------------------------------------------------------------------------------------------------------------------------------
  							SuiteScript Governance
--------------------------------------------------------------------------------------------------------------------------------------
Use record.submitFields() instead of record.load() + record.save()
Use search.lookupfields() instead of ResultSet.each()
Offload processing to scheduled or map/reduce scripts
  -------------------------------------------------------------------------------------------------------------------------------------
  								CUSTOM ERROR
----------------------------------------------------------------------------------------------------------------------------------------
define(['N/error'], function (error){
   var orderprocessingErr = error.create({
   	name : 'OrderProcessingError',
	message : 'There was a problem processing your order'
   });
   
   return {
   	onRequest : function (context) {
		try{
			if(problemWithOrder){
				throw orderProcessingError;
			}
		}catch(e){
			// handle exception
		}
	}
       }
  });
  ---------------------------------------------------------------------------------------------------------------------------------------
  								ERROR Handling
----------------------------------------------------------------------------------------------------------------------------------------
try{
	var supervisor = record.load({
		type : record.Type.EMPLOYEE,
		id : 1234
	});
	
   }catch(e){
       var ex = JSON.parse(e);
       var errorMsg = 'Error: ' + ex.name + '\n' +
       		      'Message: ' + ex.message;
	
	if(ex.type == 'error.SuiteScriptError'){
		errorMsg = errormsg + '\n' + 
				'ID: '		+ ex.id + '\n' + 
				'Cause: '	+ ex.cause + '\n' + 
				'Stack Trace: ' + ex.stack;
	}
	if(ex.type == 'error.UserEventError'){
		errorMsg = errormsg + '\n' + 
				'ID: '		+ ex.id + '\n' + 
				'Event type: '	+ ex.eventType + '\n' + 
				'record ID: '	+ ex.recordId + '\n' + 
				'Stack Trace: ' + ex.stack;
	}
	log.debug(errorType, errorMsg);
--------------------------------------------------------------------------------------------------------------------------------------		      
  								REDIRECT
---------------------------------------------------------------------------------------------------------------------------------------
// Redirect to Suitelet

    	redirect.toSuitelet({
    		scriptId : 'customscript_sdr_demo_suitelet',
    		deploymentId : 'customdeploy_sdr_demo_suitelet',
    		parameters : {
    			ev_name : employee.getValue('firstname'),
    			ev_notes : employee.getValue('comments'),
    			ev_emp_id : employee.id
    		}
    	});
	
In Suitelet - parse the parameters:
-----------------------------------
var request = context.request;

if(request.method == 'GET'){
    		
    	// reading the params
    	var firstName = request.parameters.ev_name;
    	var notes = request.parameters.ev_notes;
    	var empId = request.parameters.ev_emp_id;
}


Redirect to Record:
---------------------
redirect.toRecord({
    		type : record.Type.EMPLOYEE,
    		id : empId
    	});
	
Redirect to custom record:
--------------------------
var pdc = redirect.toRecord({
    		type : 'customrecord_pdc',
    		id : pdcid
    	});
----------------------------------------------------------------------------------------------------------------------------------------
  								CREATE RECORD
--------------------------------------------------------------------------------------------------------------------------------------
//create a new custom record entry - Record Name : PDC

    	var newPDC = record.create({
    		type : 'customrecord_pdc',	//customrecord_RecordName
    		/*isDynamic: true,
    		defaultValues: {
    			custrecord_se_pdcinvamt : invoiceNo,
    			custrecord_se_pdccust : customer
    		}*/
    	});
    	
    	newPDC.setValue('custrecord_se_pdcinvamt', invoiceNo);
    	newPDC.setValue('custrecord_se_pdccust', customer);
  
  // New Delivered record entry
  
  var newEmpRecord = record.create({
    		type : record.Type.EMPLOYEE
    	});
  ------------------------------------------------------------------------------------------------------------------------------------
  								LOAD RECORD
------------------------------------------------------------------------------------------------------------------------------------------
if(context.fieldId == 'subsidiary'){            // check the current active field
						var subsidiaryRec = record.load({
			        	    type: record.Type.SUBSIDIARY, 
			        	    id: employee.getValue('subsidiary')
			        	});
						
						if (subsidiaryRec.getValue('country') != "US"){     
							dialog.alert({
								title : 'Invalid Subsidiary',
								message : "Please select a US subsidiary."
							});
							
							//employee.setValue('subsidiary', '');
							return false;
						}
}

------------------------------------------------------------------------------------------------------------------------------------------
                                                          Name as Character Only
-------------------------------------------------------------------------------------------------------------------------------------------
if (context.fieldId == 'lastname'){
						var lastName = employee.getValue('lastname');
						var format = /^[A-Za-z]+$/;						
						
						if(!format.test(lastName) && lastName){							
							employee.setValue('lastname', '');
							dialog.alert({
								title : 'Error - Last Name',
								message : "Name should contains alphabets only."
							});
							return false;
						}
}
------------------------------------------------------------------------------------------------------------------------------------------
                                                          Date Validation
-----------------------------------------------------------------------------------------------------------------------------------------
var today = new Date();
		today.setHours(0, 0, 0, 0);
    
    if (context.fieldId == 'birthdate') {
						var birthdDate = new Date(employee.getValue('birthdate'));						

						birthdDate.setHours(0, 0, 0, 0);

						if (birthdDate.getTime() > today.getTime()) {
							employee.setValue('birthdate', '');
							dialog.alert({
										title : 'Error - Birth Date Error',
										message : "Birthdate can not be after today's date."
									});
							return false;
						}
}
---------------------------------------------------------------------------------------------------------------------------------------
                                                     Number Validation
---------------------------------------------------------------------------------------------------------------------------------------
if (employee.getText('customform') == evform) {
									
					// SSN - should be 9 character in length or null
					if (context.fieldId == 'socialsecuritynumber') {
						var ssn = employee.getValue('socialsecuritynumber');
						var ssnFormat = /^\d+$/;

						if ((ssn.length != 0 && ssn.length != 9) || (ssn.length != 0 && !ssnFormat.test(ssn))) {						
							employee.setValue('socialsecuritynumber', '');
							dialog.alert({
										title : 'Error - Social Security Number',
										message : 'SSN Must be of 9 digits Number, please enter the correct Number.'
									});
							return false;
						}
					}
					
----------------------------------
alphanumeric format : var integIdFormat = '/^[a-z0-9]+$/i';
------------------------------------------------------------------------------------------------------------------------------------
                                                              format date to MMDDYYYY
-------------------------------------------------------------------------------------------------------------------------------------                                                              
		function getFormattedDate(date){    	
		    	date = new Date(date);
		    	var d = date.getDate();
		    	var m = date.getMonth() + 1;
		    	//const y = date.getFullYear();
		    	
		    	var newDate = (m <= 9 ? '0' + m : m) + (d <= 9 ? '0' + d : d) + date.getFullYear();
		    	console.log(newDate);
		    	return newDate;
	}                                                            
--------------------------------------------------------------------------------------------------------------------------------------
                                      convert JS object into url parameter string
--------------------------------------------------------------------------------------------------------------------------------------                                      
					
					var param = Object.keys(empObject).reduce(function(_qs, k, i){ return _qs + '&' + k + '=' + empObject[k]; }, '').substring(1);
					console.log(param);
---------------------------------------------------------------------------------------------------------------------------------------
                                          Format Address (From Multiple Lines)
----------------------------------------------------------------------------------------------------------------------------------------
/// format address
		   /* function getAddressDetails(address){
		    	console.log(address);
		    	var arr, length, arr1, city = "", addressLine = "";
		    	
		    	arr = address.split(/\n/);
		    	length = arr.length;
		    	arr1 = arr[length-2].split(" ");
		    	addressLine = "";
		    	
		    	console.log(arr);
		    	console.log(arr1);
		    	
		    	//extract city
		    	for(j=0; j < arr1.length - 2; j++){
		    		city += arr1[j];
		    		if(j != arr1.length - 3){
		    			city += " ";
		    		}
		    	}
		    	
		    	
		    	// extract address line 1
		    	for(i=0; i < length-2; i++){
		    		addressLine += arr[i];
		    		
		    		if(i != length - 3){
		    			addressLine += ", ";
		    		}
		    	}
		    	
		    	console.log(addressLine);
		    	
		    	return {
		    		country : arr[length-1],
		    		city : city,
		    		state : arr1[arr1.length - 2],
		    		zip : arr1[arr1.length - 1],
		    		addline1 : addressLine
		    	}
		    }
---------------------------------------------------------------------------------------------------------------------------------------
                                                    Internal RESTLet Call
--------------------------------------------------------------------------------------------------------------------------------------
/*var param = Object.keys(empObject).reduce(function(_qs, k, i){ return _qs + '&' + k + '=' + empObject[k]; }, '').substring(1);
					console.log(param);*/
					
					
					// restlet - ev
					// make internal url
					/*
					var restletUrl = url.resolveScript({
			    		scriptId	: 'customscript_se_rl_employee_everify',
			    		deploymentId : 'customdeploy_se_rl_employee_everify'
			    	});
					
					// call get method of restlet and store the response
					var response = https.get({			    		
			    		url : restletUrl + '&' + param
			    	}); 
					
					// 
					console.log('Response' , response.body);
					if(response){
						employee.setValue('custentity_se_everify_currentstatus', 2);
					}
---------------------------------------------------------------------------------------------------------------------------------------
                                                                  POST
---------------------------------------------------------------------------------------------------------------------------------------
function sendAndUpdateRecord(empObj){
    	
    	var xmlObj = objectToXml(empObj);
    	log.audit('XML POST', xmlObj);
    	
    	// POST xml to E-Verify
    	var response = https.post({
    		 url: restURL,
    		 body: xmlObj
    	});
    	
    	//log.debug('RESPONSE', response);
    	log.debug('XML RESPONSE BODY', response.toJSON().body);
    	
    	var xmlDocument = xml.Parser.fromString({
    		text : response.toJSON().body		//Get XML part from JSON response
    	});
    	
    	//log.audit('Root Node', xmlDocument.documentElement.tagName);
    	
    	//Success
    	if(xmlDocument.documentElement.tagName === 'success'){
    		var successNode = xml.XPath.select({
       		 	node : xmlDocument,
       		 	xpath : '//success'
    		});
    		
    		var i9Id = successNode[0].getElementsByTagName('I9ID')[0].textContent;
    		
    		log.audit('SUCCESS ' + empObj.internalid, i9Id);
    		
    		// Update the record
    		var employeeRec = record.load({
        	    type: record.Type.EMPLOYEE, 
        	    id: empObj.internalid,
        	    //isDynamic: true
        	});
        	
        	employeeRec.setValue('custentity_se_i9id', i9Id);
        	
        	try{
        		employeeRec.save();
        		log.debug({
        			title: 'I9ID added into record: ' + empObj.internalid,
        			details: 'Record Id: ' + empObj.internalid + ' I9ID: ' + i9Id
        			});
        	}catch (e) {
        		log.error({
                    title: e.name,
                    details: e.message
                });  
    		}
    	
    	//Fail	
    	}else{
    		/*var failNode = xml.XPath.select({
       		 	node : xmlDocument,
       		 	xpath : '//fail'
    		});*/
    		
    		log.audit('FAIL ' + xmlObj.internalid, response.toJSON().body);
    	}
    }
    
--------------------------------------------------------------------------------------------------------------------------------------
                                                    Convert JSON TO XML
---------------------------------------------------------------------------------------------------------------------------------------
function objectToXml(obj) {
        var xmlPayload = '<?xml version="1.0" encoding="UTF-8"?><root>';

        for (var prop in obj) {
        	
            if (obj[prop] == null)
            	obj[prop] = "";

            xmlPayload += "<" + prop + ">";
            xmlPayload += obj[prop];
            xmlPayload += "</" + prop + ">";
        }
        return xmlPayload + "</root>";
    }
--------------------------------------------------------------------------------------------------------------------------------------    
						Convert JS OBJECT to JSON String
----------------------------------------------------------------------------------------------------------------------------------------						
    	log.audit("JSON", JSON.stringify(empObject, null, 20));		// 20 spaces b/w attribute and value
	
--------------------------------------------------------------------------------------------------------------------------------------
							HOME ADDRESS ON EMPLOYEE RECORD
-------------------------------------------------------------------------------------------------------------------------------------
console.log(employee.getValue('billaddr1'),	// line 1
console.log(employee.getValue('billaddr2'),	// line 2
employee.getValue('billcity'),			// city
employee.getValue('billstate'),			// state	
employee.getValue('billzip')),			// zip
employee.getValue('billcountry');		//country

---------------------------------------------------------------------------------------------------------------------------------------
						ADD BUTTON ON STANDARD FORM (using CS & UE Scripts)
---------------------------------------------------------------------------------------------------------------------------------------						
1. Using Client Script: Runs only in Create/Edit mode by default
--------------------------------------------------------------------
Navigate to Script record -> Edit the Client Script -> In Button Section: Add Button Name & function name (to be executed on button click)
In Client Script:
	Write the function & return it along with the entry points.
	
LIMITATIONS: Client Script doesn't load & run in view mode of the record.

2. Using User Event Script: Runs in Create/Edit/View mode by default
----------------------------------------------------------------------
In before load:
	context.form.addButton({
		id: "custpage_myButton",		//custpage prefix is required
		label: "Click Me",
		functionName:	"onButtonClicked"	//function to be executed on button clicked	
	});

// If the function to be executed on button click is written on client script, load the client script. As CS doesn't load in view mode by default.

context.form.clientScriptModulePath = "SuiteScripts/Custom Scripts/CS_fileName.js";		//Path: sclientScript Path

NOTE: Even if Client script is loaded in view mode using userEventScript, the button created in client script record will not appear
in the record in view mode.
---------------------------------------------------------------------------------------------------------------------------------------										
							HIDE BUTTONS
---------------------------------------------------------------------------------------------------------------------------------------
NOTE: NS provides JQuery lib ref out of the box.

In User Event, BeforeLoad:
---------------------------
		//create an inline html field
        var hideFld = context.form.addField({
        	id:'custpage_hide_buttons',
        	label:'not shown - hidden',
        	type: serverWidget.FieldType.INLINEHTML
        });

         
        //for every button you want to hide, modify the scr += line
        var scr = "";
        scr += 'jQuery("#custpage_btn_resend").hide();';		//Button ID Followed by #
        //scr += 'jQuery("#addmessage").hide();';
        //scr += 'jQuery("#addcontact").hide();';

        //push the script into the field so that it fires and does its handy work
        hideFld.defaultValue = "<script>jQuery(function($){require([], function(){" + scr + ";})})</script>"
---------------------------------------------------------------------------------------------------------------------------------------
							Script Governance Unit
---------------------------------------------------------------------------------------------------------------------------------------
var scriptObj = runtime.getCurrentScript();
log.debug("Remaining governance units: " + scriptObj.getRemainingUsage());
	
---------------------------------------------------------------------------------------------------------------------------------------
							ADD Field using SuiteScript
---------------------------------------------------------------------------------------------------------------------------------------
NOTE: Applies to field created by suitescript only.

scriptContext.form.getField('tranid').setHelpText({help:'Test'});

====================================================================================================================================
					Add TAB, FIELD GROUP, FIELD & LIST using userevent script
=======================================================================================================================================							
var tab = context.form.addTab({
    			 id : 'custpage_tabid2',
    			 label : 'Tab 2'
    			});

    		var fieldgroup = context.form.addFieldGroup({
    			 id : 'custpage_fieldgroupid',
    			 label : 'Field Group',
    			 tab: 'custpage_tabid2'
    			});
    			var field = context.form.addField({
    			 id : 'custpage_textfield',
    			 type : serverWidget.FieldType.TEXT,
    			 label : 'Text',
    			 container : 'custpage_fieldgroupid'
    			});
    		
    		
    		var myselectfield = context.form.addField({
        		id: 'custpage_residentststus', 
        		type: 'select', 
        		label: 'resident status',
        		container: 'custpage_fieldgroupid'
        	});
    		
    		
    		myselectfield.addSelectOption({value: '0', text: ''});
    	    myselectfield.addSelectOption({value: '1', text: 'Citizen1'});
    	    myselectfield.addSelectOption({value: '2', text: 'Non-Citizen National'}); 
    	    myselectfield.addSelectOption({value: '3', text: 'PR'});
    	    myselectfield.addSelectOption({value: '4', text: 'Alien-Authorized to work'});
    	    
    	    myselectfield.setHelpText({
    	    	help : "Help Text Goes Here."
    	    });
=======================================================================================================================================
							SUBLIST
---------------------------------------------------------------------------------------------------------------------------------------
Sublist line count
-------------------
var customer = context.currentRecord;
    	var ProdprefCount = customer.getLineCount({	
    		sublistId: 'recmachcustrecord_se_pdr_cust'
    	});
-------------------------------------------------------------
Line Init
-------------------------------------------------------------
var customer = context.currentRecord;
    	customer.setCurrentSublistValue({
    		sublistId:'recmachcustrecord_se_pdr_cust',
    		fieldId: 'custrecord_se_prd_prefquantity',
    		value : 5	
    	});
--------------------------------------------------------------
Validate Line
-------------------------------------------------------------
function validateLine(context) {
    	var customer = context.currentRecord;
    	log.debug("Function","ValidateLine");
    	var PrefQuantity = customer.getCurrentSublistValue({
    		sublistId:'recmachcustrecord_se_pdr_cust',
    		fieldId: 'custrecord_se_prd_prefquantity',
    	});
    	log.debug("Value is: " + PrefQuantity);
    	if (PrefQuantity > 10) {
    		alert ('Quantity cannot be greater than 10');
    		return false;
    	}
    	return true;
--------------------------------------------------------------
Access Exixting Sublist lines
--------------------------------------------------------------
var customer = context.currentRecord;
    	var ProdprefCount = customer.getLineCount({	
    		sublistId: 'recmachcustrecord_se_pdr_cust'
    	});
    	var totalQuantity = 0;
    	for(var i=0; i<ProdprefCount; i++) {
    		totalQuantity = totalQuantity + Number(customer.getSublistValue({
        		sublistId:'recmachcustrecord_se_pdr_cust',
        		fieldId: 'custrecord_se_prd_prefquantity',
        		line : i
       }));
=======================================================================================================================================
							SAVED SEARCH
=======================================================================================================================================
Using Run and foreach
------------------------------------------------
var employeeSearchObj = search.create({
    		   type: "employee",
    		   filters:
    		   [
    		      ["custentity_se_everify_i9verify","is","F"], 
    		      "AND", 
    		      ["subsidiary.country","anyof","US"], 
    		      "AND", 
    		      ["custentity_se_i9id","isnotempty",""]
    		   ],
    		   columns:
    		   [
    		      /*search.createColumn({name: "email", label: "Email"}),
    		      search.createColumn({name: "phone", label: "Phone"}),
    		      search.createColumn({name: "firstname", label: "First Name"}),
    		      search.createColumn({name: "middlename", label: "Middle Name"}),
    		      search.createColumn({name: "lastname", label: "Last Name"}),
    		      search.createColumn({name: "birthdate", label: "Birth Date"}),
    		      search.createColumn({name: "subsidiary", label: "Subsidiary"}),
    		      search.createColumn({name: "custentity_se_everify_appliedssn", label: "Applied for SSN"}),
    		      search.createColumn({name: "custentity_se_everify_alienno", label: "Alien Registration Number"}),
    		      search.createColumn({name: "custentitycustentity_se_everify_fppnum", label: "Foreign Passport Number"}),
    		      search.createColumn({name: "custentity_se_i9id", label: "I-9 Id"}),
    		      search.createColumn({name: "custentity_se_everify_i94admissionnum", label: "I-94 Admission Number"}),
    		      search.createColumn({name: "custentity_se_everify_uscis", label: "USCIS#"}),
    		      search.createColumn({name: "visaexpdate", label: "Visa Expiration Date"}),
    		      search.createColumn({name: "custentity_se_everify_noexpirydate", label: "No Expiration Date"}),
    		      search.createColumn({name: "custentity_se_everify_workauthexpirydate", label: "Work Authorization Expiry Date"}),
    		      search.createColumn({name: "custentity_se_everify_pic", label: "Country of Issuance"}),
    		      search.createColumn({name: "residentstatus", label: "Resident Status"}),
    		      search.createColumn({
    		         name: "country",
    		         join: "subsidiary",
    		         label: "Country"
    		      }),*/
    		      search.createColumn({name: "internalid", label: "Internal ID"})
    		   ]
    		});
    	
    		var searchResultCount = employeeSearchObj.runPaged().count;
    		log.debug("employeeSearchObj result count",searchResultCount);
    		employeeSearchObj.run().each(function(result){
    		   log.audit("Internal Id", result.getValue('internalid'));
    		   return true;
    		});
--------------------------------------------------------------------------------------------------------------------------------------
using run an range
--------------------------------------------------------
var filters = [
    	               	["custentity_se_everify_i9verify","is","F"], 
    	               	"AND", 
    	               	["custentity_se_i9id","isnotempty",""], 
    	               	"AND", 
    	               	["subsidiary.country","anyof","US"]
    	              ];
    	
    	var employeeSearchResults = search.create({
    		type: search.Type.EMPLOYEE,
    		filter: filters,
    		columns: [
    		          search.createColumn({name: "email", label: "Email"}),
    		          search.createColumn({name: "phone", label: "Phone"}),
    		          search.createColumn({name: "firstname", label: "First Name"}),
    		          search.createColumn({name: "middlename", label: "Middle Name"}),
    		          search.createColumn({name: "lastname", label: "Last Name"}),
    		          search.createColumn({name: "birthdate", label: "Birth Date"}),
    		          search.createColumn({name: "subsidiary", label: "Subsidiary"}),
    		          search.createColumn({name: "custentity_se_everify_appliedssn", label: "Applied for SSN"}),
    		          search.createColumn({name: "custentity_se_everify_alienno", label: "Alien Number"}),
    		          search.createColumn({name: "custentitycustentity_se_everify_fppnum", label: "Foreign Passport Number"}),
    		          search.createColumn({name: "custentity_se_i9id", label: "I-9 Id"}),
    		          search.createColumn({name: "custentity_se_everify_i9verify", label: "I-9 Verified"}),
    		          search.createColumn({name: "custentity_se_everify_i94admissionnum", label: "I-94 Admission Number"}),
    		          search.createColumn({name: "custentity_se_everify_uscis", label: "USCIS#"}),
    		          search.createColumn({name: "visaexpdate", label: "Visa Expiration Date"}),
    		          search.createColumn({name: "custentity_se_everify_noexpirydate", label: "No Expiration Date"}),
    		          search.createColumn({name: "custentity_se_everify_workauthexpirydate", label: "Work Authorization Expiry Date"}),
    		          search.createColumn({name: "custentity_se_everify_pic", label: "Passport Issued Country"}),
    		          search.createColumn({name: "residentstatus", label: "Resident Status"}),
    		          search.createColumn({
    		        	  name: "country",
    		        	  join: "subsidiary",
    		        	  label: "Country"
    		          })
    		        ]
    		}).run().getRange({
        		start: 0,
        		end: 2
        	});
// Parsing the search results
    	for (var i = 0; i < employeeSearchResults.length; i++) {
    		log.debug('Row ' + i, employeeSearchResults[i].getValue('firstname'));
    		log.debug('Row ' + i, employeeSearchResults[i].getValue('subsidiary'));
    		log.debug('Row ' + i, employeeSearchResults[i].getValue('name'));
    		log.debug('Row ' + i, employeeSearchResults[i].getValue('country'));
    	}   
-------------------------------------------------------------------------------------------------------------------------------------	
	
										
										
										
										
										
										
										
										
										
										
										
