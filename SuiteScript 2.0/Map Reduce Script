/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/search'],
/**
 * @param {search} search
 */
function(search) {
   
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	//create search on invoice
    	var invSearch = search.create({
    		type : 'transaction',
    		filters : [
    		      ['type', 'anyof', 'CustInvc'], 'and',
    		      ['mainline', 'is', true]
    		],
    		columns : ['entity', 'total']
    	});
    	
    	
    	
    	return invSearch;		//JSON fotmat, passed to context of map function
    	
    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	var searchResult = JSON.parse(context.value);
    	
    	//log.audit('SEARCH Result', searchResult);
    	
    	log.debug('Raw map Data', context.value);
    	
    	context.write({
    		key : searchResult.values.entity.text,
    		value : searchResult.values.total
    	});
    	
    	
    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {
    	var total = 0;
    	
    	for (var i in context.values){
    		total += parseFloat(context.values[i]);
    	}
    	
    	log.debug(context.key, total);
    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {
    	var type = summary.toString();
    	
    	log.audit(type + ' Usage Consumed ', summary.usage);
    	log.audit(type + ' Number of Queues ', summary.concurrency);
    	log.audit(type + ' Number of Yields ', summary.yields);
    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
